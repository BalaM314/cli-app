/*
Copyright Â© <BalaM314>, 2024.
This file is part of cli-app.
cli-app is free software: you can redistribute it and/or modify it under the terms of the GNU Lesser General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.
cli-app is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.
You should have received a copy of the GNU Lesser General Public License along with cli-app. If not, see <https://www.gnu.org/licenses/>.

Contains unit tests for Application.
*/

import path from "node:path";
import type fs from "node:fs";
import { Application } from "../../build/Application.js";
import { ApplicationError } from "../../build/classes.js";

process.chdir(path.join(import.meta.dirname, ".."));

function applicationError(message:string):jasmine.AsymmetricMatcher<unknown> {
	return {
		asymmetricMatch(received){
			return received instanceof ApplicationError && received.message.includes(message);
		},
		jasmineToString(){
			return `<ApplicationError ${message}>`;
		}
	};
}


describe("Application", () => {
	const fakePathToApp = path.join(process.cwd(), "test.js");

	it("should run an application without crashing", async () => {
		const app = new Application("test-app", "Autogenerated test app");
		app.command("cmd1", "test command", () => {});
		spyOn(app.commands["cmd1"]!, "handler").and.callThrough();
		await app.run(["node", fakePathToApp, `cmd1`], {throwOnError: true});
		expect(app.commands["cmd1"]!.handler).toHaveBeenCalled();
	});

	it("should accept named arguments", async () => {
		const app = new Application("test-app", "Autogenerated test app");
		app.command("cmd1", "test command", (opts, app) => {
			expect(opts.namedArgs["namedarg1"]).toEqual("namedvalue1");
			expect(opts.namedArgs["namedarg2"]).toEqual(undefined);
		}, false, {
			namedArgs: {
				namedarg1: {
					description: "test arg",
					required: true
				},
				namedarg2: {
					description: "test arg"
				},
			}
		});

		spyOn(app.commands["cmd1"]!, "handler").and.callThrough();
		await app.run(["node", fakePathToApp, `cmd1`, `--namedarg1`, `namedvalue1`], {throwOnError: true});
		expect(app.commands["cmd1"]!.handler).toHaveBeenCalled();
	});

	it("should accept valueless named arguments", async () => {
		const app = new Application("test-app", "Autogenerated test app");
		app.command("cmd1", "test command", (opts, app) => {
			expect(opts.namedArgs.namedarg1).toEqual("true");
			expect(opts.namedArgs.namedarg2).toEqual(undefined);
			expect("namedarg2" in opts.namedArgs).toEqual(false);
		}, false, {
			namedArgs: {
				namedarg1: {
					description: "test arg",
					needsValue: false
				},
				namedarg2: {
					description: "test arg",
					needsValue: false
				},
			}
		});

		spyOn(app.commands["cmd1"]!, "handler").and.callThrough();
		await app.run(["node", fakePathToApp, `cmd1`, `--namedarg1`, `notnamedvalue1`], {throwOnError: true});
		expect(app.commands["cmd1"]!.handler).toHaveBeenCalled();
	});

	it("should accept positional arguments", async () => {
		const app = new Application("test-app", "Autogenerated test app");
		
		app.command("cmd1", "test command", (opts, app) => {
			expect(opts.positionalArgs[0]).toEqual("namedvalue1");
			expect(opts.positionalArgs[1] as string | undefined).toEqual(undefined);
		}, false, {
			positionalArgs: [
				{
					name: "arg1",
					description: "test arg",
				},
				{
					name: "arg2",
					description: "test arg",
					required: false
				},
			]
		});
		spyOn(app.commands["cmd1"]!, "handler").and.callThrough();
		await app.run(["node", fakePathToApp, `cmd1`, `namedvalue1`], {throwOnError: true});
		expect(app.commands["cmd1"]!.handler).toHaveBeenCalled();
	});

	it("should fail if a required named argument is not passed", async () => {
		const app = new Application("test-app", "Autogenerated test app");
		app.command("cmd1", "test command", (opts, app) => {
			
		}, false, {
			namedArgs: {
				namedarg1: {
					description: "test arg",
					required: true
				},
			}
		});

		await expectAsync(app.run(["node", fakePathToApp, `cmd1`], {throwOnError: true}))
			.toBeRejectedWith(applicationError("required named arg"));
		
	});

	it("should fail if a required positional argument is not passed", async () => {
		const app = new Application("test-app", "Autogenerated test app");
		app.command("cmd1", "test command", (opts, app) => {
			
		}, false, {
			positionalArgs: [
				{
					name: "positionalArg1",
					description: "test arg"
				},
			]
		});

		await expectAsync(app.run(["node", fakePathToApp, `cmd1`], {throwOnError: true}))
			.toBeRejectedWith(applicationError("required positional arg"));
	});

	it("should fill in default values for named arguments", async () => {
		const app = new Application("test-app", "Autogenerated test app");
		app.command("cmd1", "test command", (opts, app) => {
			expect(opts.namedArgs["optional1"]).toEqual("defaultValue1");
			expect(opts.namedArgs["optional2"]).toEqual("defaultValue2");
			expect(opts.namedArgs.optional3).toEqual("true");
			expect(opts.namedArgs.optional4).toEqual(undefined);
			expect("optional4" in opts.namedArgs).toEqual(false);
		}, false, {
			namedArgs: {
				optional1: {
					description: "test arg",
					default: "defaultValue1"
				},
				optional2: {
					description: "test arg",
					default: "defaultValue2"
				},
				optional3: {
					description: "test arg",
					default: "true",
					needsValue: false,
				},
				optional4: {
					description: "test arg",
					default: "false",
					needsValue: false,
				},
			}
		});

		spyOn(app.commands["cmd1"]!, "handler").and.callThrough();
		await app.run(["node", fakePathToApp, `cmd1`, `--optional2`], {throwOnError: true});
		expect(app.commands["cmd1"]!.handler).toHaveBeenCalled();
	});

	it("should fill in default values for positional arguments", async () => {
		const app = new Application("test-app", "Autogenerated test app");
		app.command("cmd1", "test command", (opts, app) => {
			expect(opts.positionalArgs[0]).toEqual("value1");
			expect(opts.positionalArgs[1]).toEqual("defaultValue2");
		}, false, {
			positionalArgs: [
				{
					name: "arg1",
					description: "test arg"
				},
				{
					name: "arg2",
					description: "test arg",
					default: "defaultValue2"
				},
			]
		});

		spyOn(app.commands["cmd1"]!, "handler").and.callThrough();
		await app.run(["node", fakePathToApp, `cmd1`, `value1`], {throwOnError: true});
		expect(app.commands["cmd1"]!.handler).toHaveBeenCalled();
	});

	it("should not allow required positional arguments to follow optional ones", () => {
		const app = new Application("test-app", "Autogenerated test app");
		expect(() => {
			app.command("cmd1", "test command", (opts, app) => {
				expect(opts.positionalArgs[0]).toEqual("value1");
				expect(opts.positionalArgs[1]).toEqual("defaultValue2");
			}, false, {
				positionalArgs: [
					{
						name: "arg1",
						description: "test arg",
						required: false
					},
					{
						name: "arg2",
						description: "test arg",
						default: "defaultValue2"
					},
				]
			});
		}).toThrowMatching(e => (e as Error)?.message.includes("cannot follow optional ones"));
	});

	it("should run a command through aliases", async () => {
		const app = new Application("test-app", "Autogenerated test app");
		app.command("cmd1", "test command", () => {}, false, {}, ["alias1"]);
		spyOn(app.commands["cmd1"]!, "handler").and.callThrough();
		await app.run(["node", fakePathToApp, `alias1`], {throwOnError: true});
		expect(app.commands["cmd1"]!.handler).toHaveBeenCalled();
	});

	it("should accept aliases for named arguments", async () => {
		const app = new Application("test-app", "Autogenerated test app");
		app.command("cmd1", "test command", (opts, app) => {
			expect(opts.namedArgs["namedarg1"]).toEqual("namedvalue1");
			expect(opts.namedArgs["namedarg2"]).toEqual("namedvalue2");
		}, false, {
			namedArgs: {
				namedarg1: {
					description: "test arg",
					aliases: ["alias1"]
				},
				namedarg2: {
					description: "test arg"
				},
			},
			aliases: {
				alias2: "namedarg2"
			}
		});

		spyOn(app.commands["cmd1"]!, "handler").and.callThrough();
		await app.run(["node", fakePathToApp, `cmd1`, `--alias1`, `namedvalue1`, `--alias2`, `namedvalue2`], {throwOnError: true});
		expect(app.commands["cmd1"]!.handler).toHaveBeenCalled();
	});

	it("should correctly obtain sourceDirectory", async () => {
		const app = new Application("test-app", "Autogenerated test app");
		app.command("cmd1", "test command", (opts, app) => {
			//do nothing
		});
		
		spyOn(app.commands["cmd1"]!, "handler");
		app["fs_realpathSync"] = ((path:string) => path) as typeof fs.realpathSync;
		await app.run(["node", `C:\\amogus\\sussy\\src\\index.js`, `cmd1`], {throwOnError: true});
		expect(app.commands["cmd1"]!.handler).toHaveBeenCalledWith(jasmine.anything(), jasmine.objectContaining({
			sourceDirectory: jasmine.stringMatching(/C:[/\\]amogus[/\\]sussy[/\\]src[/\\]?/)
		}));
		await app.run(["node", `F:\\index.js`, `cmd1`], {throwOnError: true});
		expect(app.commands["cmd1"]!.handler).toHaveBeenCalledWith(jasmine.anything(), jasmine.objectContaining({
			sourceDirectory: jasmine.stringMatching(/F:[/\\]?/)
		}));
		await app.run(["node", `/home/username/Documents/coding/js/sussy/sus.js`, `cmd1`], {throwOnError: true});
		expect(app.commands["cmd1"]!.handler).toHaveBeenCalledWith(jasmine.anything(), jasmine.objectContaining({
			sourceDirectory: jasmine.stringMatching(/[/\\]home[/\\]username[/\\]Documents[/\\]coding[/\\]js[/\\]sussy[/\\]?/)
		}));

	});
	
});

describe("Application.parseArgs", () => {
	function runWith(args:string[], programName:string = "sus.js"){
		return ["node", programName, ...args];
	}
	it("should crash on no args", () => {
		expect(() => Application.parseArgs([])).toThrow();
	});
	it("should return empty args if application run with no args", () => {
		expect(Application.parseArgs(runWith([]))).toEqual({
			namedArgs: {},
			positionalArgs: [],
		});
	});
	it("should parse positional args", () => {
		expect(Application.parseArgs(runWith(["sussy", "baka"]))).toEqual({
			namedArgs: {},
			positionalArgs: ["sussy", "baka"],
		});
	});
	it("should parse named args", () => {
		expect(Application.parseArgs(runWith(["--sussy", "baka", "--amogus", "sus"]))).toEqual({
			namedArgs: {
				sussy: "baka",
				amogus: "sus",
			},
			positionalArgs: [],
		});
	});
	it("should parse named args of the form --name=value", () => {
		expect(Application.parseArgs(runWith(["--sussy", "baka", "--amogus=sus"]))).toEqual({
			namedArgs: {
				sussy: "baka",
				amogus: "sus",
			},
			positionalArgs: [],
		});
	});
	it("should set named args to null if a value is not specified", () => {
		expect(Application.parseArgs(runWith(["--sussy", "baka", "--amogus", "--amoma"]))).toEqual({
			namedArgs: {
				sussy: "baka",
				amogus: null,
				amoma: null,
			},
			positionalArgs: [],
		});
	});
	it("should parse named args and positional args", () => {
		expect(Application.parseArgs(runWith(["sus", "--sussy", "baka", "amogus", "--amoma"]))).toEqual({
			namedArgs: {
				sussy: "baka",
				amoma: null,
			},
			positionalArgs: ["sus", "amogus"],
		});
	});
	it("should correctly handle valuelessOptions", () => {
		expect(Application.parseArgs(runWith(["--sus", "--sussy", "baka", "--amogus", "amoma"]), ["sussy"])).toEqual({
			namedArgs: {
				sus: null,
				sussy: null,
				amogus: "amoma",
			},
			positionalArgs: ["baka"],
		});
	});
	it("should accept single character named arguments with one hyphen", () => {
		expect(Application.parseArgs(runWith(["-s", "baka", "-a", "sus"]))).toEqual({
			namedArgs: {
				s: "baka",
				a: "sus",
			},
			positionalArgs: [],
		});
	});
	it("should accept single character named arguments with one hyphen", () => {
		expect(Application.parseArgs(runWith(["-amo", "baka", "-gus", "sus"]))).toEqual({
			namedArgs: {
				a: null,
				m: null,
				o: "baka",
				g: null,
				u: null,
				s: "sus",
			},
			positionalArgs: [],
		});
	});
	it("should handle the -- arg separator", () => {
		expect(Application.parseArgs(runWith(["pos", "-s", "baka", "--", "sus", "--amogus"]))).toEqual({
			namedArgs: {
				s: "baka",
			},
			positionalArgs: ["pos", "--", "sus", "--amogus"],
		});
	});
	it("should accept the --name=value arg form", () => {
		expect(Application.parseArgs(runWith(["sus", "--sussy=baka", "amogus", "--amoma"]))).toEqual({
			namedArgs: {
				sussy: "baka",
				amoma: null,
			},
			positionalArgs: ["sus", "amogus"],
		});
	});
	it("should do all of the above", () => {
		expect(Application.parseArgs(runWith(["p1", "--n1", "v1", "p2", "p3", "-n2", "p4", "--n-3", "v-2", "--n4", "--n5", "v3", "p5"]), ["sussy", "2"])).toEqual({
			namedArgs: {
				n1: "v1",
				n: null,
				"2": null,
				"n-3": "v-2",
				n4: null,
				n5: "v3",
			},
			positionalArgs: ["p1", "p2", "p3", "p4", "p5"],
		});
	});
});



