import * as path from "path";
import { Script } from "../src/Script.js";
import { ApplicationError } from "../src/classes.js";
describe("Script", () => {
    it("should run a script without crashing", () => {
        const script = new Script("test-app", "Autogenerated test app", (opts, app) => { });
        spyOn(script.defaultCommand, "handler").and.callThrough();
        script.run(["node", path.join(process.cwd(), "index.js")], { throwOnError: true });
        expect(script.defaultCommand.handler).toHaveBeenCalled();
    });
    it("should accept named arguments", () => {
        const script = new Script("test-app", "Autogenerated test app", (opts, app) => {
            expect(opts.namedArgs["namedarg1"]).toEqual("namedvalue1");
            expect(opts.namedArgs["namedarg2"]).toEqual(undefined);
        }, {
            namedArgs: {
                namedarg1: {
                    description: "test arg",
                    required: true
                },
                namedarg2: {
                    description: "test arg"
                },
            }
        });
        spyOn(script.defaultCommand, "handler").and.callThrough();
        script.run(["node", path.join(process.cwd(), "index.js"), `--namedarg1`, `namedvalue1`], { throwOnError: true });
        expect(script.defaultCommand.handler).toHaveBeenCalled();
    });
    it("should accept positional arguments", () => {
        const script = new Script("test-app", "Autogenerated test app", (opts, app) => {
            expect(opts.positionalArgs[0]).toEqual("namedvalue1");
            expect(opts.positionalArgs[1]).toEqual(undefined);
        }, {
            positionalArgs: [
                {
                    name: "arg1",
                    description: "test arg",
                },
                {
                    name: "arg2",
                    description: "test arg",
                    required: false
                },
            ]
        });
        spyOn(script.defaultCommand, "handler").and.callThrough();
        script.run(["node", path.join(process.cwd(), "index.js"), `namedvalue1`], { throwOnError: true });
        expect(script.defaultCommand.handler).toHaveBeenCalled();
    });
    it("should fail if a required named argument is not passed", () => {
        const script = new Script("test-app", "Autogenerated test app", (opts, app) => {
        }, {
            namedArgs: {
                namedarg1: {
                    description: "test arg",
                    required: true
                },
            }
        });
        expect(() => {
            script.run(["node", path.join(process.cwd(), "index.js")], { throwOnError: true });
        }).toThrowMatching((err) => err instanceof ApplicationError && err.message.includes("required named arg"));
    });
    it("should fail if a required positional argument is not passed", () => {
        const script = new Script("test-app", "Autogenerated test app", (opts, app) => {
        }, {
            positionalArgs: [
                {
                    name: "positionalArg1",
                    description: "test arg"
                },
            ]
        });
        expect(() => {
            script.run(["node", path.join(process.cwd(), "index.js")], { throwOnError: true });
        }).toThrowMatching((err) => err instanceof ApplicationError && err.message.includes("required positional arg"));
    });
    it("should fill in default values for named arguments", () => {
        const script = new Script("test-app", "Autogenerated test app", (opts, app) => {
            expect(opts.namedArgs["optional1"]).toEqual("defaultValue1");
            expect(opts.namedArgs["optional2"]).toEqual("defaultValue2");
        }, {
            namedArgs: {
                optional1: {
                    description: "test arg",
                    default: "defaultValue1"
                },
                optional2: {
                    description: "test arg",
                    default: "defaultValue2"
                },
            }
        });
        spyOn(script.defaultCommand, "handler").and.callThrough();
        script.run(["node", path.join(process.cwd(), "index.js"), `--optional2`], { throwOnError: true });
        expect(script.defaultCommand.handler).toHaveBeenCalled();
    });
    it("should fill in default values for positional arguments", () => {
        const script = new Script("test-app", "Autogenerated test app", (opts, app) => {
            expect(opts.positionalArgs[0]).toEqual("value1");
            expect(opts.positionalArgs[1]).toEqual("defaultValue2");
        }, {
            positionalArgs: [
                {
                    name: "arg1",
                    description: "test arg",
                    default: "defaultValue1"
                },
                {
                    name: "arg2",
                    description: "test arg",
                    default: "defaultValue2"
                },
            ]
        });
        spyOn(script.defaultCommand, "handler").and.callThrough();
        script.run(["node", path.join(process.cwd(), "index.js"), `value1`], { throwOnError: true });
        expect(script.defaultCommand.handler).toHaveBeenCalled();
    });
    it("should not allow required positional arguments to follow optional ones", () => {
        expect(() => {
            const script = new Script("test-app", "Autogenerated test app", (opts, app) => {
                expect(opts.positionalArgs[0]).toEqual("value1");
                expect(opts.positionalArgs[1]).toEqual("defaultValue2");
            }, {
                positionalArgs: [
                    {
                        name: "arg1",
                        description: "test arg",
                        required: false
                    },
                    {
                        name: "arg2",
                        description: "test arg",
                        default: "defaultValue2"
                    },
                ]
            });
        }).toThrowMatching((err) => !(err instanceof ApplicationError) && err.message.includes("cannot follow optional ones"));
    });
    it("should accept aliases for named arguments", () => {
        const script = new Script("test-app", "Autogenerated test app", (opts, app) => {
            expect(opts.namedArgs["namedarg1"]).toEqual("namedvalue1");
            expect(opts.namedArgs["namedarg2"]).toEqual("namedvalue2");
        }, {
            namedArgs: {
                namedarg1: {
                    description: "test arg",
                    aliases: ["alias1"]
                },
                namedarg2: {
                    description: "test arg"
                },
            },
            aliases: {
                alias2: "namedarg2"
            }
        });
        spyOn(script.defaultCommand, "handler").and.callThrough();
        script.run(["node", path.join(process.cwd(), "index.js"), `--alias1`, `namedvalue1`, `--alias2`, `namedvalue2`], { throwOnError: true });
        expect(script.defaultCommand.handler).toHaveBeenCalled();
    });
});
